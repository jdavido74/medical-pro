// utils/userProfiles.js
// Exemples de profils utilisateurs avec sp√©cialit√©s et modules

export const USER_PROFILES_EXAMPLES = {
  // M√©decin g√©n√©raliste
  generalPractitioner: {
    id: 'dr_garcia',
    name: 'Dr. Mar√≠a Garc√≠a',
    email: 'maria.garcia@medicalpro.es',
    role: 'doctor',
    specialties: ['general'],
    medicalNumber: '123456789',
    avatar: 'üë©‚Äç‚öïÔ∏è',
    companyName: 'Centro M√©dico Garc√≠a',
    plan: 'premium',
    permissions: {
      read: true,
      write: true,
      delete: false,
      manage: false
    },
    preferences: {
      language: 'es',
      timezone: 'Europe/Madrid',
      notifications: true
    }
  },

  // Cardi√≥logo
  cardiologist: {
    id: 'dr_martinez',
    name: 'Dr. Juan Mart√≠nez',
    email: 'juan.martinez@medicalpro.es',
    role: 'specialist',
    specialties: ['cardiology', 'general'],
    medicalNumber: '987654321',
    avatar: 'üë®‚Äç‚öïÔ∏è',
    companyName: 'Cl√≠nica Cardiol√≥gica Mart√≠nez',
    plan: 'premium',
    permissions: {
      read: true,
      write: true,
      delete: true,
      manage: false
    },
    preferences: {
      language: 'es',
      timezone: 'Europe/Madrid',
      notifications: true
    }
  },

  // Pediatra
  pediatrician: {
    id: 'dr_lopez',
    name: 'Dr. Ana L√≥pez',
    email: 'ana.lopez@medicalpro.es',
    role: 'specialist',
    specialties: ['pediatrics'],
    medicalNumber: '456789123',
    avatar: 'üë©‚Äç‚öïÔ∏è',
    companyName: 'Pediatr√≠a L√≥pez',
    plan: 'premium',
    permissions: {
      read: true,
      write: true,
      delete: false,
      manage: false
    },
    preferences: {
      language: 'es',
      timezone: 'Europe/Madrid',
      notifications: true
    }
  },

  // Enfermera
  nurse: {
    id: 'enf_rodriguez',
    name: 'Carmen Rodr√≠guez',
    email: 'carmen.rodriguez@medicalpro.es',
    role: 'nurse',
    specialties: [], // Solo m√≥dulos b√°sicos
    medicalNumber: '789123456',
    avatar: 'üë©‚Äç‚öïÔ∏è',
    companyName: 'Hospital San Rafael',
    plan: 'free',
    permissions: {
      read: true,
      write: true, // Limitado a ciertos campos
      delete: false,
      manage: false
    },
    preferences: {
      language: 'es',
      timezone: 'Europe/Madrid',
      notifications: true
    }
  },

  // Secretaria m√©dica
  secretary: {
    id: 'sec_fernandez',
    name: 'Isabel Fern√°ndez',
    email: 'isabel.fernandez@medicalpro.es',
    role: 'secretary',
    specialties: [],
    medicalNumber: null,
    avatar: 'üë©‚Äçüíº',
    companyName: 'Centro M√©dico San Jos√©',
    plan: 'free',
    permissions: {
      read: true,
      write: false, // Solo lectura
      delete: false,
      manage: false
    },
    preferences: {
      language: 'es',
      timezone: 'Europe/Madrid',
      notifications: false
    }
  },

  // Super Admin
  superAdmin: {
    id: 'admin_super',
    name: 'Super Administrador',
    email: 'admin@medicalpro.es',
    role: 'super_admin',
    specialties: ['*'], // Acceso a todas las especialidades
    medicalNumber: null,
    avatar: 'üîß',
    companyName: 'MedicalPro Admin',
    plan: 'premium',
    permissions: {
      read: true,
      write: true,
      delete: true,
      manage: true
    },
    preferences: {
      language: 'es',
      timezone: 'Europe/Madrid',
      notifications: true
    }
  }
};

// Funci√≥n para simular el login con diferentes perfiles
export const simulateLogin = (profileKey) => {
  const profile = USER_PROFILES_EXAMPLES[profileKey];
  if (!profile) {
    throw new Error(`Profile ${profileKey} not found`);
  }

  return {
    ...profile,
    timestamp: new Date().toISOString(),
    sessionId: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  };
};

// Configuraci√≥n de m√≥dulos por especialidad
export const SPECIALTY_MODULE_CONFIG = {
  general: {
    required: ['base', 'preventive'],
    optional: ['chronic'],
    restricted: []
  },

  cardiology: {
    required: ['base', 'cardiac'],
    optional: ['preventive', 'chronic'],
    restricted: ['pediatric'] // Un cardi√≥logo no necesita m√≥dulos pedi√°tricos
  },

  pediatrics: {
    required: ['base', 'pediatric'],
    optional: ['preventive'],
    restricted: ['cardiac'] // Los ni√±os tienen consideraciones card√≠acas especiales
  },

  dermatology: {
    required: ['base', 'skin'],
    optional: ['preventive'],
    restricted: ['cardiac', 'pediatric']
  },

  gynecology: {
    required: ['base', 'gyneco'],
    optional: ['preventive'],
    restricted: ['cardiac', 'pediatric']
  },

  orthopedics: {
    required: ['base', 'orthopedic'],
    optional: ['preventive'],
    restricted: ['cardiac', 'gyneco']
  }
};

// Funci√≥n para obtener los m√≥dulos permitidos seg√∫n el perfil
export const getModulesForProfile = (profile) => {
  let allowedModules = new Set(['base']); // Base siempre est√° incluido

  // Si es super admin, tiene acceso a todo
  if (profile.role === 'super_admin') {
    return ['*'];
  }

  // Seg√∫n las especialidades del usuario
  profile.specialties?.forEach(specialty => {
    const config = SPECIALTY_MODULE_CONFIG[specialty];
    if (config) {
      // A√±adir m√≥dulos requeridos
      config.required.forEach(module => allowedModules.add(module));

      // A√±adir m√≥dulos opcionales seg√∫n el rol
      if (profile.role === 'specialist' || profile.role === 'doctor') {
        config.optional.forEach(module => allowedModules.add(module));
      }
    }
  });

  // Restricciones seg√∫n el rol
  if (profile.role === 'nurse') {
    // Las enfermeras solo tienen acceso a m√≥dulos b√°sicos
    allowedModules = new Set(['base', 'preventive']);
  } else if (profile.role === 'secretary') {
    // Las secretarias solo ven informaci√≥n b√°sica
    allowedModules = new Set(['base']);
  }

  return Array.from(allowedModules);
};

// Funci√≥n para validar si un usuario puede acceder a un m√≥dulo
export const canAccessModule = (profile, moduleId) => {
  const allowedModules = getModulesForProfile(profile);

  // Super admin puede acceder a todo
  if (allowedModules.includes('*')) {
    return true;
  }

  return allowedModules.includes(moduleId);
};

// Funci√≥n para validar si un usuario puede editar un m√≥dulo
export const canEditModule = (profile, moduleId) => {
  // Primero verificar si puede acceder
  if (!canAccessModule(profile, moduleId)) {
    return false;
  }

  // Verificar permisos de escritura
  if (!profile.permissions?.write) {
    return false;
  }

  // Restricciones espec√≠ficas por rol
  if (profile.role === 'secretary') {
    return false; // Secretarias solo leen
  }

  if (profile.role === 'nurse') {
    // Enfermeras pueden editar solo ciertos campos del m√≥dulo base
    return moduleId === 'base' || moduleId === 'preventive';
  }

  return true;
};

// Funci√≥n de utilidad para obtener el color de la especialidad
export const getSpecialtyColor = (specialtyId) => {
  const colors = {
    general: 'green',
    cardiology: 'red',
    pediatrics: 'blue',
    dermatology: 'orange',
    gynecology: 'pink',
    orthopedics: 'gray'
  };

  return colors[specialtyId] || 'gray';
};

// Datos de ejemplo para testing
export const DEMO_SCENARIOS = {
  // Escenario 1: M√©dico general con paciente adulto
  generalAdult: {
    user: USER_PROFILES_EXAMPLES.generalPractitioner,
    patient: {
      id: 'P001',
      name: 'Carlos Mendoza',
      age: 45,
      gender: 'M'
    },
    expectedModules: ['base', 'preventive', 'chronic']
  },

  // Escenario 2: Cardi√≥logo con paciente card√≠aco
  cardiologyCase: {
    user: USER_PROFILES_EXAMPLES.cardiologist,
    patient: {
      id: 'P002',
      name: 'Mar√≠a Gonz√°lez',
      age: 62,
      gender: 'F'
    },
    expectedModules: ['base', 'cardiac', 'preventive', 'chronic']
  },

  // Escenario 3: Pediatra con ni√±o
  pediatricCase: {
    user: USER_PROFILES_EXAMPLES.pediatrician,
    patient: {
      id: 'P003',
      name: 'Sof√≠a Ram√≠rez',
      age: 5,
      gender: 'F'
    },
    expectedModules: ['base', 'pediatric', 'preventive']
  }
};

export default USER_PROFILES_EXAMPLES;